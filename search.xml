<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker 常规安装简介</title>
      <link href="/2022/11/12/Docker%20%E5%B8%B8%E8%A7%84%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/11/12/Docker%20%E5%B8%B8%E8%A7%84%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-常规安装简介"><a href="#Docker-常规安装简介" class="headerlink" title="Docker 常规安装简介"></a>Docker 常规安装简介</h1><ul><li><strong>总体步骤</strong></li><li><strong>安装tomcat</strong></li><li><strong>安装mysql</strong></li><li><strong>安装redis</strong></li><li><strong>安装Nginx</strong></li></ul><h1 id="1-总体步骤"><a href="#1-总体步骤" class="headerlink" title="1. 总体步骤"></a>1. <strong>总体步骤</strong></h1><h2 id="1-搜索镜像"><a href="#1-搜索镜像" class="headerlink" title="1. 搜索镜像"></a>1. 搜索镜像</h2><h2 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2. 拉取镜像"></a>2. 拉取镜像</h2><h2 id="3-查看镜像"><a href="#3-查看镜像" class="headerlink" title="3. 查看镜像"></a>3. 查看镜像</h2><h2 id="4-启动镜像—-gt-服务端口映射"><a href="#4-启动镜像—-gt-服务端口映射" class="headerlink" title="4. 启动镜像—&gt;  服务端口映射"></a>4. 启动镜像—&gt;  服务端口映射</h2><h2 id="5-停止容器"><a href="#5-停止容器" class="headerlink" title="5. 停止容器"></a>5. 停止容器</h2><h2 id="6-移除容器"><a href="#6-移除容器" class="headerlink" title="6. 移除容器"></a>6. 移除容器</h2><h1 id="2-安装tomcat"><a href="#2-安装tomcat" class="headerlink" title="2. 安装tomcat"></a>2. <strong>安装tomcat</strong></h1><h2 id="1-docker-hub上面查找tomcat镜像"><a href="#1-docker-hub上面查找tomcat镜像" class="headerlink" title="1. docker hub上面查找tomcat镜像"></a>1. docker hub上面查找tomcat镜像</h2><pre><code>docker search tomcat  [--limit 5\]</code></pre><p><img src="/images/1XlzsLTmFTdz8EEpNrnu63NhGocx7NaA3U9auyV4T5I.png" alt="image"></p><pre><code>  ### 2. 从docker hub上拉取tomcat镜像到本地      1. **docker pull tomcat**</code></pre><p><img src="/images/84jythG0gMoBuuU4YJX4-Fv0Cc-NOzxeEtO8C16yobc.png" alt="image"></p><pre><code>  ### 3. **docker images**查看是否有拉取到的tomcat</code></pre><p><img src="/images/2oRTj1mDOnBbijEtvrHc4Qon7TlgUFpNBUyZ_zgbClM.png" alt="image"></p><pre><code>  ### 4. 使用tomcat镜像创建容器实例(也叫运行镜像)      1. **docker run -it -p 8080:8080 tomcat**        # 1. \-p 小写，主机端口:docker容器端口        # 2. \-P 大写，随机分配端口</code></pre><p><img src="/images/ePcwNa8rbGICp4yqHKtZ05fD5R4FWevytYv40Yyfygg.png" alt="image"></p><pre><code>        # 3. i:交互        # 4. t:终端        # 5. d:后台  ### 5. 访问猫首页      1. 问题</code></pre><p><img src="/images/sBipmZQfJWm4cjWIn5iWz0vF5zeFiuxMGXmIKH9dhY4.png" alt="image"></p><pre><code>      2. 解决        # 1. 可能没有映射端口或者没有关闭防火墙        # 2. 把webapps.dist目录换成webapps           ## 1. 先成功启动tomcat</code></pre><p><img src="/images/FFu6wv9qwwHEXiwzcv71Vt8Vg3auLrGzulC8clQmQkY.png" alt="image"></p><pre><code>           ## 2. 查看webapps 文件夹查看为空</code></pre><p><img src="/images/ePBADfVXYFhZee3Bzx5N4pb9HHPN2PmwChaHDxli-8M.png" alt="image"></p><p><img src="/images/Xudnz5vpY6BP72V9dETV___zV3RxLyWwxw-xXNwDg6Y.png" alt="image"></p><pre><code>           ## 3.   ### 6. 免修改版说明      1. **docker pull billygoo/tomcat8-jdk8**      2. **docker run -d -p 8080:8080 --name tomcat8 billygoo/tomcat8-jdk8**</code></pre><p><img src="/images/ClfPBgWw4pTvaeORLE_UX6qVnhnsR8k0V_TSWrbI28U.png" alt="image"></p><p><img src="/images/cWp82mjb72z50JjA_KICF8rYswjR-y2aAZtQV8kMmjU.png" alt="image"></p><h1 id="3-安装mysql"><a href="#3-安装mysql" class="headerlink" title="3. 安装mysql"></a>3. <strong>安装mysql</strong></h1><h2 id="1-docker-hub上面查找mysql镜像"><a href="#1-docker-hub上面查找mysql镜像" class="headerlink" title="1. docker hub上面查找mysql镜像"></a>1. docker hub上面查找mysql镜像</h2><p><img src="/images/SISow2vy3ZnW3jntXhvmutqVbHn9IT1hwVTSEZQI5Tc.png" alt="image"></p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><h2 id="3-从docker-hub上-阿里云加速器-拉取mysql镜像到本地标签为5-7"><a href="#3-从docker-hub上-阿里云加速器-拉取mysql镜像到本地标签为5-7" class="headerlink" title="3. 从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7"></a>3. 从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7</h2><p><img src="/images/fxbrjSglEqlQU15qPz9YdH9pGVKJRuPKJTDVFIDAeOQ.png" alt="image"></p><h2 id="4-使用mysql5-7镜像创建容器-也叫运行镜像"><a href="#4-使用mysql5-7镜像创建容器-也叫运行镜像" class="headerlink" title="4. 使用mysql5.7镜像创建容器(也叫运行镜像)"></a>4. 使用mysql5.7镜像创建容器(也叫运行镜像)</h2><pre><code>  ### 1. 命令出处，哪里来的？</code></pre><p><img src="/images/8QOw6zGFeFeDzo8GtZP8EcJZIbZQqMduyqvLbGHNFjg.png" alt="image"></p><pre><code>  ### 2. 简单版      1. 使用mysql镜像</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/vBMNIl6f7OEqwdfHai5egb01HJ5Tmzrh-DQksuwsd5c.png" alt="image"></p><pre><code>      2. 建库建表插入数据</code></pre><p><img src="/images/wDvrpgNejNDipgOFPslp_1T3UPhxhxCJ3fbZ4gZ4t0A.png" alt="image"></p><pre><code>      3. 外部Win10也来连接运行在dokcer上的mysql容器实例服务</code></pre><p><img src="/images/cUkjQvdGkXRFClnreh8URliFmT7xdoK3FeIsmEPPiNk.png" alt="image"></p><pre><code>      4. 问题        # 1. 插入中文数据试试</code></pre><p><img src="/images/N5IJsSPo-2bkx_nYK0ThfJQIxP1Ws4kRGjTsNuKW22E.png" alt="image"></p><pre><code>           ## 1. 为什么报错?              1. docker上默认字符集编码隐患</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE <span class="string">&#x27;character%&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ETpQ21KIRnBXXnlzZLvetgAAQy-ZfNzYdtMTtyAoVBA.png" alt="image"></p><pre><code>        # 2. 删除容器后，里面的mysql数据如何办        ## 3. 容器实例一删除，你还有什么？删容器到跑路。。。。。？  ### 3. 实战版      1. 新建mysql容器实例</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --privileged=<span class="literal">true</span> -v /wl/mysql/log:/var/log/mysql -v /wl/mysql/data:/var/lib/mysql -v /wl/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name mysql57 mysql:5.7</span><br></pre></td></tr></table></figure><p><img src="/images/aUZ_A_DQLgGyMcy0ptjY9xv8wF-tyaeoeru30JK1YCo.png" alt="image"></p><pre><code>      2. 新建my.cnf</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span> </span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span> </span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><p><img src="/images/h0Bf0Kc6IhOpCvFrEppQmGGwtFJhM-xUYbxU4kH2ibc.png" alt="image"></p><pre><code>      3. 重新启动mysql容器实例再重新进入并查看字符编码</code></pre><p><img src="/images/XGoR-z2XkCSWF4HPpZLpR01UkLTh-SMzrfDDOZnGevg.png" alt="image"></p><pre><code>      4. 再新建库新建表再插入中文测试</code></pre><p><img src="/images/t_mJ5QjgmahU-O6P2O8W2LSBnROsVzz3ri-_jKZec24.png" alt="image"></p><pre><code>      5. 结论</code></pre><blockquote><p>之前的DB  无效”<br>修改字符集操作+重启mysql容器实例<br>之后的DB  有效，需要新建</p></blockquote><blockquote><p>结论：docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库-表-插数据</p></blockquote><p><img src="/images/qVnIs8VEdvUUdw_XvlJ0iCtvQk4jPHpcwJPSIbAeELM.png" alt="image"></p><pre><code>      6. 假如将当前容器实例删除，再重新来一次，之前建的db01实例还有吗？**有 **        # 1. 测试中出现</code></pre><p><img src="/images/lywPXLk-NkbVLO2YBxDk9JCsYofGpKPP-V1VIPoCp_A.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">出现问题的原因是::</span><br><span class="line">我们进入mysql 时，没有使用-A参数；</span><br><span class="line">即我们使用</span><br><span class="line">mysql -hhostname -uroot -ppassword -Pport 的方式进入数据，</span><br><span class="line">而没有使用</span><br><span class="line">mysql -hhostname -uroot -ppassword -Pport -A的方式进入数据库。</span><br></pre></td></tr></table></figure><h1 id="4-安装redis"><a href="#4-安装redis" class="headerlink" title="4. 安装redis"></a>4. <strong>安装redis</strong></h1><h2 id="1-从docker-hub上-阿里云加速器-拉取redis镜像到本地标签为6-0-8"><a href="#1-从docker-hub上-阿里云加速器-拉取redis镜像到本地标签为6-0-8" class="headerlink" title="1. 从docker hub上(阿里云加速器)拉取redis镜像到本地标签为6.0.8"></a>1. 从docker hub上(阿里云加速器)拉取redis镜像到本地标签为6.0.8</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:6.0.8</span><br></pre></td></tr></table></figure><h2 id="2-入门命令"><a href="#2-入门命令" class="headerlink" title="2. 入门命令"></a>2. 入门命令</h2><p><img src="/images/-w8PEXUFlSOLO6cgcmMB2eu9Txmp7vetdRwA4bhnhd0.png" alt="image"></p><h2 id="3-命令提醒：容器卷记得加入-–privileged-x3D-true"><a href="#3-命令提醒：容器卷记得加入-–privileged-x3D-true" class="headerlink" title="3. 命令提醒：容器卷记得加入**–privileged&#x3D;true**"></a>3. 命令提醒：容器卷记得加入**–privileged&#x3D;true**</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied</span><br><span class="line">解决办法：在挂载目录后多加一个--privileged=<span class="literal">true</span>  参数即可</span><br></pre></td></tr></table></figure><h2 id="4-在CentOS宿主机下新建目录-x2F-app-x2F-redis"><a href="#4-在CentOS宿主机下新建目录-x2F-app-x2F-redis" class="headerlink" title="4. 在CentOS宿主机下新建目录&#x2F;app&#x2F;redis"></a>4. 在CentOS宿主机下新建目录&#x2F;app&#x2F;redis</h2><h2 id="5-将一个redis-conf文件模板拷贝进-x2F-app-x2F-redis目录下"><a href="#5-将一个redis-conf文件模板拷贝进-x2F-app-x2F-redis目录下" class="headerlink" title="5. 将一个redis.conf文件模板拷贝进&#x2F;app&#x2F;redis目录下"></a>5. 将一个redis.conf文件模板拷贝进&#x2F;app&#x2F;redis目录下</h2><p><a href="7C4PxfR8oNom1KNu25td4NTwGKmSSABI8mJfuPAJWNE.conf">office</a></p><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><h2 id="7-x2F-app-x2F-redis目录下修改redis-conf文件"><a href="#7-x2F-app-x2F-redis目录下修改redis-conf文件" class="headerlink" title="7. &#x2F;app&#x2F;redis目录下修改redis.conf文件"></a>7. &#x2F;app&#x2F;redis目录下修改redis.conf文件</h2><h2 id="8-使用redis6-0-8镜像创建容器-也叫运行镜像"><a href="#8-使用redis6-0-8镜像创建容器-也叫运行镜像" class="headerlink" title="8. 使用redis6.0.8镜像创建容器(也叫运行镜像)"></a>8. 使用redis6.0.8镜像创建容器(也叫运行镜像)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -p 6379:6379 --name redis6.0.8 --privileged=<span class="literal">true</span> -v /wl/redis/redis.conf:/etc/redis/redis.conf -v /wl/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p><img src="/images/ZGKxLQ1R0rvc0Rj3fYz-PMF23EldWEEmTSt3UzXSUOY.png" alt="image"></p><h2 id="9-测试redis-cli连接上来"><a href="#9-测试redis-cli连接上来" class="headerlink" title="9. 测试redis-cli连接上来"></a>9. 测试redis-cli连接上来</h2><p><img src="/images/TdN7aSYI4-P_rfo1ikHLeLxlfwmfSr8j84_SFLHE4L8.png" alt="image"></p><blockquote><p>docker exec -it 运行着Rediis服务的容器ID redis-cli</p></blockquote><h2 id="10-请证明docker启动使用了我们自己指定的配置文件"><a href="#10-请证明docker启动使用了我们自己指定的配置文件" class="headerlink" title="10. 请证明docker启动使用了我们自己指定的配置文件"></a>10. 请证明docker启动使用了我们自己指定的配置文件</h2><pre><code>  ### 1. 修改前</code></pre><p><img src="/images/3cLbnJnLnsjWfGobR846T-sejJoB2k5YJwXyn6DiTCM.png" alt="image"></p><blockquote><p>我们用的配置文件，数据库默认是16个</p></blockquote><pre><code>  ### 2. 修改后</code></pre><p><img src="/images/4zlPcbz6yiYPqkHrUAD-stzVbhioK4354q51PReErWU.png" alt="image"></p><blockquote><p>宿主机的修改会同步给docker容器里面的配置。</p></blockquote><h2 id="11-测试redis-cli连接上来第2次"><a href="#11-测试redis-cli连接上来第2次" class="headerlink" title="11. 测试redis-cli连接上来第2次"></a>11. 测试redis-cli连接上来第2次</h2><p><img src="/images/-Q3l5nrmQuvU5jxumbZlDKZHEBv39ayZaCk3-AoQ0fE.png" alt="image"></p><h1 id="5-安装Nginx"><a href="#5-安装Nginx" class="headerlink" title="5. 安装Nginx"></a>5. <strong>安装Nginx</strong></h1><p>上一节：<a href="https://www.wiz.cn/share-plus/note/441e4910-4174-11ec-9536-5376b4c4331a/c9b508b9-b835-408f-bbdf-916929686f0d">Docker 容器数据卷</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/11/hello-world/"/>
      <url>/2022/11/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
